


`$()` command

 `([[ condition ]] && action) ` conditionals

 `${}` brace expansion

`(( ))`: Double parentheses for arithmetic evaluation in bash


`${#arr[@]}`: Gets the length of the array:


`arr[@]` refers to all elements of the array

`#` operator gets the count of elements

`${#arr[@]}` returns the total number of elements in the array

--------------------------------------------------


Here is a **comprehensive shell scripting symbol reference chart**, formatted uniformly as you requested:

---

### ðŸ§¾ **Shell Scripting Symbol & Syntax Cheat Sheet**

```bash
`$()`         command substitution â€” runs a command and replaces with its output
```

```bash
``cmd``       legacy command substitution â€” same as `$()`, but less readable
```

```bash
${}           parameter expansion â€” access or manipulate variable values
```

```bash
(( ))         arithmetic evaluation â€” used for integer math
```

```bash
[[ ]]         conditional test â€” used in `if`, `while`, etc. (bash extended test)
```

```bash
[ ]           test â€” POSIX-style test command (more portable, but less powerful)
```

```bash
((cond)) && action   arithmetic conditional + short-circuit AND logic
```

```bash
[[ cond ]] || action string or file conditional + short-circuit OR logic
```

```bash
!             logical NOT â€” negates a condition
```

```bash
&&            logical AND â€” runs right side only if left side succeeds
```

```bash
||            logical OR â€” runs right side only if left side fails
```

```bash
;             command separator â€” allows multiple commands on one line
```

```bash
;;            end of case pattern â€” used in `case` statements
```

```bash
&             background â€” runs a command in the background
```

```bash
|             pipe â€” passes output of one command as input to another
```

```bash
>             redirect stdout â€” overwrite file with output
```

```bash
>>            append stdout â€” append output to file
```

```bash
<             redirect stdin â€” takes input from a file
```

```bash
2>            redirect stderr â€” send error messages to a file
```

```bash
&>            redirect both stdout and stderr to a file (bash)
```

```bash
<<<           here string â€” provides string input directly to stdin
```

```bash
<< EOF        here document â€” multi-line string input to stdin
EOF
```

```bash
$?            exit status â€” result of the last command (0 = success)
```

```bash
$0            script name â€” the name of the current script
```

```bash
$1 - $9       positional parameters â€” arguments passed to the script
```

```bash
$@            all arguments as separate words (preserves quotes)
```

```bash
$*            all arguments as one word (may collapse quotes)
```

```bash
"$@"          expands to "$1" "$2" ... â€” safe way to loop through args
```

```bash
"$*"          expands to "$1 $2 ..." â€” all args in one string
```

```bash
${#var}       length â€” gets the length of a string or array
```

```bash
${var:offset}             substring â€” returns substring from offset
```

```bash
${var:offset:length}      substring â€” returns substring of given length
```

```bash
${var#pattern}            remove shortest match of pattern from front
```

```bash
${var##pattern}           remove longest match of pattern from front
```

```bash
${var%pattern}            remove shortest match from back
```

```bash
${var%%pattern}           remove longest match from back
```

```bash
${var/pattern/replacement}      replace first match
```

```bash
${var//pattern/replacement}     replace all matches
```

```bash
declare -a name           declare an array variable
```

```bash
arr=(1 2 3)               creates an array with 3 elements
```

```bash
${arr[0]}                 access array element by index
```

```bash
${arr[@]}                 all elements of the array
```

```bash
${#arr[@]}                number of elements in array
```

```bash
for item in "${arr[@]}"  iterate over array safely
```

```bash
function name() { }       defines a function
```

```bash
name() { }                alternative function definition
```

```bash
return n                 return from a function with exit code n
```

```bash
exit n                   exit the script with exit code n
```

```bash
set -e                  exit on error (fail fast)
```

```bash
set -x                  print each command before running it (debug)
```

---






































